{
	"compiler": {
		"version": "0.8.30+commit.73712a01"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_register",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "pensionCurrencyErc20",
								"type": "address"
							},
							{
								"internalType": "enum RiskType",
								"name": "riskType",
								"type": "uint8"
							},
							{
								"internalType": "uint256",
								"name": "totalContribution",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "principalOnMaturity",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "interest",
								"type": "uint256"
							},
							{
								"components": [
									{
										"internalType": "enum Schedule",
										"name": "schedule",
										"type": "uint8"
									},
									{
										"internalType": "uint256",
										"name": "term",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "minimumAmount",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "maximumAmount",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "totalIntervals",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "totalAmount",
										"type": "uint256"
									}
								],
								"internalType": "struct FinancialSchedule",
								"name": "contributionSchedule",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "enum Schedule",
										"name": "schedule",
										"type": "uint8"
									},
									{
										"internalType": "uint256",
										"name": "term",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "minimumAmount",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "maximumAmount",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "totalIntervals",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "totalAmount",
										"type": "uint256"
									}
								],
								"internalType": "struct FinancialSchedule",
								"name": "emissionSchedule",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "maxGainPercentage",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "maxLossPercentage",
										"type": "uint256"
									}
								],
								"internalType": "struct Tolerance",
								"name": "tolerance",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "lifespan",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "units",
								"type": "uint256"
							}
						],
						"internalType": "struct MProtoProduct",
						"name": "_protoProduct",
						"type": "tuple"
					}
				],
				"name": "createProduct",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_productId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_txId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_productId",
						"type": "uint256"
					}
				],
				"name": "expireProduct",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_txId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getMProductIds",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "_mProductIds",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getName",
				"outputs": [
					{
						"internalType": "string",
						"name": "_name",
						"type": "string"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_productId",
						"type": "uint256"
					}
				],
				"name": "getProduct",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "id",
								"type": "uint256"
							},
							{
								"internalType": "address",
								"name": "provider",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "erc20",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "totalContribution",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "principalOnMaturity",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "interest",
								"type": "uint256"
							},
							{
								"internalType": "enum RiskType",
								"name": "riskType",
								"type": "uint8"
							},
							{
								"components": [
									{
										"internalType": "enum Schedule",
										"name": "schedule",
										"type": "uint8"
									},
									{
										"internalType": "uint256",
										"name": "term",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "minimumAmount",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "maximumAmount",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "totalIntervals",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "totalAmount",
										"type": "uint256"
									}
								],
								"internalType": "struct FinancialSchedule",
								"name": "contributionSchedule",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "enum Schedule",
										"name": "schedule",
										"type": "uint8"
									},
									{
										"internalType": "uint256",
										"name": "term",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "minimumAmount",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "maximumAmount",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "totalIntervals",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "totalAmount",
										"type": "uint256"
									}
								],
								"internalType": "struct FinancialSchedule",
								"name": "emissionSchedule",
								"type": "tuple"
							},
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "maxGainPercentage",
										"type": "uint256"
									},
									{
										"internalType": "uint256",
										"name": "maxLossPercentage",
										"type": "uint256"
									}
								],
								"internalType": "struct Tolerance",
								"name": "tolerance",
								"type": "tuple"
							},
							{
								"internalType": "uint256",
								"name": "createdDate",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "expiryDate",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "units",
								"type": "uint256"
							}
						],
						"internalType": "struct MPProduct",
						"name": "_product",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getProductIdsByOwner",
				"outputs": [
					{
						"internalType": "uint256[]",
						"name": "_productIds",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getVersion",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_version",
						"type": "uint256"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_productId",
						"type": "uint256"
					}
				],
				"name": "isKnownProduct",
				"outputs": [
					{
						"internalType": "bool",
						"name": "_isKnown",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "notifyChangeOfAddress",
				"outputs": [
					{
						"internalType": "bool",
						"name": "_acknowledged",
						"type": "bool"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_productId",
						"type": "uint256"
					}
				],
				"name": "updateProductInventory",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "_txId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/core/product/MPProductManager.sol": "MPProductManager"
		},
		"evmVersion": "prague",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/core/product/MPProductManager.sol": {
			"keccak256": "0xbea0a2177f7f5fd2b731b4750ddbf8aa2d634f170d286acdd835cbdc7839f64c",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://d3b863e8941caedec0e197ffe19d1043308aa5e7ef253211594b0a98d88960dc",
				"dweb:/ipfs/QmbAHYutQa6hKeEGBEpuN4anoSV74DxScekDe7iUjnBD5U"
			]
		},
		"contracts/interfaces/product/IMPProductManager.sol": {
			"keccak256": "0x3fe748da6420b20f970e8a1443814276d780fd87c4103cf10f1750610d5f03de",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://dbe02452199900cb1ad9ca9a12454da848ee6d0639a1139bc6724dcc94630efc",
				"dweb:/ipfs/QmUWNaEDFWCUafMnZPRfMf7RxtY5e5FqJxE8pyeTwbgfkY"
			]
		},
		"contracts/interfaces/util/IMPTxManager.sol": {
			"keccak256": "0xb2661b9da60f8a483054001232cae554bfb617df3868c135b754b939a3dcd3d4",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://62fa28535ff5723e73ce44028fa21fce22c0e6c7e3df58db0124337d0d5cd7f0",
				"dweb:/ipfs/QmQiGQRH5ixRbGWKynpzJAjwhUpjosNo7pLpGuVGWGCBzM"
			]
		},
		"contracts/interfaces/util/IRegister.sol": {
			"keccak256": "0x2728fc17d66438db568f764b1a39dde3bc911b1246a8f31182e9a05b76e7ea8f",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://d172d51d432ac26a6d44d116d967347055fdc5cc77f98836caf735dd4f331067",
				"dweb:/ipfs/QmaJSHMHZmppZWHMJqqNXsF8BWj1wToJvWuewBuJSLLKTg"
			]
		},
		"contracts/interfaces/util/IVersion.sol": {
			"keccak256": "0x2b1635fee7f38a02aff4dfe8c66655df3b198ca74b1455e5977304cf003b6a12",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://71969e06b2ea2b0736e26788f197970e20b0510a4e11d5190f33353b40a92a79",
				"dweb:/ipfs/QmR5zgEhoib45vCiE7wQ37kLxoC6RZeZfDb9jxe6xK5VYb"
			]
		},
		"contracts/structs/MPStructs.sol": {
			"keccak256": "0xeec22747f8e03ed69b4b76f93747501634aa75fad8b9fc3bfa03ea44f24cd3c4",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://a8b131e8a8367e53776cf052b53aa63bb5207066596a60fb0af9a02ed146e2e7",
				"dweb:/ipfs/QmfQvHvzvhVno2cxfyY9CfAJWwGnBQBBYrF8FVEo78dx2a"
			]
		}
	},
	"version": 1
}